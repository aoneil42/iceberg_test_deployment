name: Deploy Geospatial Platform

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: 'false'

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.6.0

jobs:
  # Job 1: Validate and Format Check
  validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

  # Job 2: Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  # Job 3: Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Polaris image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/polaris:$IMAGE_TAG \
                       -t $ECR_REGISTRY/polaris:latest \
                       ./docker/polaris
          docker push $ECR_REGISTRY/polaris:$IMAGE_TAG
          docker push $ECR_REGISTRY/polaris:latest

      - name: Build and push OGC API image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/ogc-api:$IMAGE_TAG \
                       -t $ECR_REGISTRY/ogc-api:latest \
                       ./docker/ogc-api
          docker push $ECR_REGISTRY/ogc-api:$IMAGE_TAG
          docker push $ECR_REGISTRY/ogc-api:latest

  # Job 4: Deploy Infrastructure
  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, build-images, build-frontend]
    if: github.event.inputs.destroy != 'true'
    permissions:
      id-token: write
      contents: read
    outputs:
      ec2_public_ip: ${{ steps.terraform-output.outputs.ec2_public_ip }}
      instance_id: ${{ steps.terraform-output.outputs.instance_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=geospatial-platform/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
            -var="polaris_client_secret=${{ secrets.POLARIS_CLIENT_SECRET }}" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          cd terraform
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
          echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT

  # Job 5: Deploy Application
  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for EC2 to be ready
        run: |
          echo "Waiting for EC2 instance to be ready..."
          sleep 60

      - name: Deploy frontend to S3
        run: |
          aws s3 sync frontend/dist/ s3://geospatial-platform-frontend-${{ secrets.AWS_ACCOUNT_ID }}/
          aws s3 website s3://geospatial-platform-frontend-${{ secrets.AWS_ACCOUNT_ID }}/ \
            --index-document index.html

      - name: Health Check
        run: |
          EC2_IP="${{ needs.deploy-infra.outputs.ec2_public_ip }}"
          echo "Testing endpoints on $EC2_IP..."
          
          # Wait for services to be ready (max 5 minutes)
          for i in {1..30}; do
            if curl -sf "http://$EC2_IP:8181/v1/config" > /dev/null; then
              echo "‚úÖ Polaris is ready!"
              break
            fi
            echo "Waiting for Polaris... ($i/30)"
            sleep 10
          done
          
          for i in {1..30}; do
            if curl -sf "http://$EC2_IP:8080/" > /dev/null; then
              echo "‚úÖ OGC API is ready!"
              break
            fi
            echo "Waiting for OGC API... ($i/30)"
            sleep 10
          done

      - name: Display deployment info
        run: |
          echo "üöÄ Deployment Complete!"
          echo "üìç EC2 Public IP: ${{ needs.deploy-infra.outputs.ec2_public_ip }}"
          echo "üîó Polaris: http://${{ needs.deploy-infra.outputs.ec2_public_ip }}:8181/v1/config"
          echo "üîó OGC API: http://${{ needs.deploy-infra.outputs.ec2_public_ip }}:8080/"
          echo "üîó Frontend: http://geospatial-platform-frontend-${{ secrets.AWS_ACCOUNT_ID }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"

  # Job 6: Destroy (manual trigger only)
  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.destroy == 'true'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=geospatial-platform/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
            -var="polaris_client_secret=${{ secrets.POLARIS_CLIENT_SECRET }}"
