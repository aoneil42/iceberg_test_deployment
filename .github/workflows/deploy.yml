name: Deploy Infrastructure and Application

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform action (plan/apply/destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.6.0

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.terraform_action || 'plan' }}
    runs-on: ubuntu-latest
    
    outputs:
      ec2_public_ip: ${{ steps.outputs.outputs.ec2_ip }}
      rds_endpoint: ${{ steps.outputs.outputs.rds_endpoint }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false -reconfigure

      - name: Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        env:
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: |
          terraform plan \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}" \
            -input=false \
            -out=tfplan

      - name: Empty S3 Bucket Before Apply
        if: github.event.inputs.terraform_action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        working-directory: terraform
        run: |
          # Try to get bucket name from current state
          BUCKET_NAME=$(terraform output -raw s3_warehouse_bucket 2>/dev/null || echo "iceberg-test-e1828e3c")
          
          echo "Attempting to empty bucket: $BUCKET_NAME"
          
          # Delete all versions and delete markers
          aws s3api delete-objects --bucket "$BUCKET_NAME" \
            --delete "$(aws s3api list-object-versions \
              --bucket "$BUCKET_NAME" \
              --output json \
              --query '{Objects: [Versions,DeleteMarkers][].[]|[].{Key:Key,VersionId:VersionId}}' 2>/dev/null)" 2>/dev/null || true
          
          # Delete any remaining current objects
          aws s3 rm "s3://$BUCKET_NAME" --recursive 2>/dev/null || true
          
          echo "✅ Bucket emptied (or already empty)"
        continue-on-error: true

      - name: Terraform Apply
        if: github.event.inputs.terraform_action == 'apply' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        working-directory: terraform
        env:
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: |
          terraform apply -auto-approve -input=false tfplan

      - name: Terraform Destroy
        if: github.event.inputs.terraform_action == 'destroy'
        working-directory: terraform
        env:
          TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}
        run: |
          terraform destroy -auto-approve -input=false \
            -var="db_master_password=${{ secrets.DB_MASTER_PASSWORD }}"

      - name: Get Terraform Outputs
        if: github.event.inputs.terraform_action != 'destroy'
        id: outputs
        working-directory: terraform
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip 2>/dev/null || echo "pending")
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint 2>/dev/null || echo "pending")
          
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT
          echo "rds_endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT
          
          echo "EC2 Public IP: $EC2_IP"
          echo "RDS Endpoint: $RDS_ENDPOINT"

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.terraform_action != 'destroy'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URLs
        id: ecr
        run: |
          POLARIS_REPO=$(aws ecr describe-repositories \
            --repository-names "iceberg-test-polaris-catalog" \
            --query 'repositories[0].repositoryUri' \
            --output text 2>/dev/null || echo "")
          
          OGC_API_REPO=$(aws ecr describe-repositories \
            --repository-names "iceberg-test-ogc-api-features" \
            --query 'repositories[0].repositoryUri' \
            --output text 2>/dev/null || echo "")
          
          echo "polaris_repo=$POLARIS_REPO" >> $GITHUB_OUTPUT
          echo "ogc_api_repo=$OGC_API_REPO" >> $GITHUB_OUTPUT

      - name: Build and push Polaris image
        if: steps.ecr.outputs.polaris_repo != ''
        working-directory: docker/polaris
        run: |
          docker build -t ${{ steps.ecr.outputs.polaris_repo }}:latest .
          docker push ${{ steps.ecr.outputs.polaris_repo }}:latest

      - name: Build and push OGC API image
        if: steps.ecr.outputs.ogc_api_repo != ''
        working-directory: docker/ogc-api
        run: |
          docker build -t ${{ steps.ecr.outputs.ogc_api_repo }}:latest .
          docker push ${{ steps.ecr.outputs.ogc_api_repo }}:latest

  deploy-app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [terraform, build-and-push]
    if: github.event.inputs.terraform_action != 'destroy'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Docker containers on EC2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=iceberg-test-instance" \
                      "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)
          
          if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "⚠️ EC2 instance is not running. Skipping container deployment."
            exit 0
          fi
          
          echo "Deploying containers on instance $INSTANCE_ID..."
          
          # Get RDS endpoint and S3 bucket
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier iceberg-test-polaris-db \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)
          
          S3_BUCKET=$(aws s3 ls | grep iceberg-test-warehouse | awk '{print $3}')
          
          echo "RDS Endpoint: $RDS_ENDPOINT"
          echo "S3 Bucket: $S3_BUCKET"
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "set -e",
              "echo \"Creating deployment directory...\"",
              "mkdir -p /home/ec2-user/deployment",
              "cd /home/ec2-user/deployment",
              "echo \"Generating docker-compose.yml...\"",
              "cat > docker-compose.yml << \"EOFCOMPOSE\"",
              "version: \"3.8\"",
              "",
              "services:",
              "  polaris:",
              "    image: 735891086824.dkr.ecr.us-west-2.amazonaws.com/polaris-catalog:latest",
              "    ports:",
              "      - \"8181:8181\"",
              "    environment:",
              "      - AWS_REGION=us-west-2",
              "      - POLARIS_BOOTSTRAP_TYPE=postgres",
              "      - POLARIS_PERSISTENCE_TYPE=postgres",
              "      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://'"$RDS_ENDPOINT"':5432/polaris",
              "      - QUARKUS_DATASOURCE_USERNAME=polaris",
              "      - QUARKUS_DATASOURCE_PASSWORD=${{ secrets.DB_MASTER_PASSWORD }}",
              "    restart: unless-stopped",
              "",
              "  ogc-api:",
              "    image: 735891086824.dkr.ecr.us-west-2.amazonaws.com/ogc-api-features:latest",
              "    ports:",
              "      - \"8080:8080\"",
              "    environment:",
              "      - AWS_REGION=us-west-2",
              "      - POLARIS_URI=http://polaris:8181",
              "      - S3_BUCKET='"$S3_BUCKET"'",
              "    depends_on:",
              "      - polaris",
              "    restart: unless-stopped",
              "EOFCOMPOSE",
              "echo \"Logging into ECR...\"",
              "aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 735891086824.dkr.ecr.us-west-2.amazonaws.com",
              "echo \"Pulling Docker images...\"",
              "docker-compose pull",
              "echo \"Starting containers...\"",
              "docker-compose up -d",
              "echo \"✅ Deployment complete!\"",
              "echo \"Container status:\"",
              "docker-compose ps"
            ]' \
            --output text \
            --query 'Command.CommandId')
          
          echo "SSM Command ID: $COMMAND_ID"
          echo "Waiting 30 seconds for deployment to complete..."
          sleep 30
          
          # Get command results
          echo "Command Status:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query '[Status,StandardOutputContent,StandardErrorContent]' \
            --output text || true

      - name: Display deployment info
        run: |
          EC2_IP="${{ needs.terraform.outputs.ec2_public_ip }}"
          RDS_ENDPOINT="${{ needs.terraform.outputs.rds_endpoint }}"
          
          echo "🎉 Deployment complete!"
          echo ""
          echo "📍 Endpoints:"
          echo "  Polaris: http://$EC2_IP:8181"
          echo "  OGC API: http://$EC2_IP:8080"
          echo "  RDS:     $RDS_ENDPOINT"
          echo ""
          echo "🔍 Test the endpoints:"
          echo "  curl http://$EC2_IP:8181/api/catalog/v1/config"
          echo "  curl http://$EC2_IP:8080/"